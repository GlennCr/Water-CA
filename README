** What is Water-CA?

Water-CA is a proof of concept and prototype fluid simulator. There have been several limited applications of cellular automation, particularly within the genre of simulation video games such as SimCity and Spore.

The purpose of Water-CA is to provide a basic framework for adding simple and fast water simulations to a game or application.

One intention is to use this framework to introduce students to programming and computer science at Camp Game this Summer. (Camp Game is an educational program for Middleschool and Highschool students, run by the School of Computing and Informations in the Summer. The program is designed to teach students concepts of programming, computer science and mathematics, and foster interest in computer science and engineering)

** What does CA stand for?

The CA stands for 'Cellular Automata'. Cellular Automata is a discrete model based upon the work of Von Neuman on self-replicating systems in the 1940s, and further expanded by the research of Gustav A. Hedlund in the 1960s.

Cellular Automations consist of a grid,  a set of cells arranged in a regular pattern (typically rows and columns). A cell is an abstract entity which takes on one of several possible states set by the programmer. A list of rules or functions are then evaluated upon every cell within the grid set, with the output being an altered grid set. The rules evaluated on a particular cell are selected based on the state of adjacent cells; these adjacent cells make up what is called the 'neighbor' set. Each successive grid generated by rule evaluation is refered to as a 'round' or 'generation'.

One interesting result of Cellular Automata is the tendency to generate very complex systems in appearance, which in reality are produced by a small set of simple rules. (A good example is 'Conway's Game of Life', which produces a wide variety of interesting and intricate animations from 4 simple rules) 

** Why use Cellular Automation to simulate Fluid?

Cellular Automation has the interesting property of producing very complex systems from a very small set of initial data and low cost calculations. The rules for CA Water for example, consists of 3 rules

 1. Cells with water can give a portion of that volume to their bottom neighbor if it is not full.
 2. Cells with water can move a portion of theat volume into their left or right neighbor if they have less volume.
 3. Cells do not move volume into cells in the Wall State.

The result is a very quick, cheap algorithm that creates an approximation of the flow of water. While not accurate or complete (without the aid of external operations), it is far less resource intensive than running accurate fluid dynamics simulations. In the context of real time rendering this stands out as a highly valuable trait.

Instructions for Downloading and Running the CA Water Simulator

1. Click the .ZIP button at the top of page (or click this link: https://github.com/GlennCr/Water-CA/zipball/master )
2. Save the file to your computer, and extract it to a location on your computer.
3. Open the extracted folder. Inside you will find a folder labeled 'Current Build'.
4. Open the 'Current Build' folder. Inside you should find the executable, 'ca_water_prototype.exe'
5. Double-click the executable 'ca_water_prototype.exe'. A new window should appear.
6. Instructions on how to use the application will be displayed in the top left corner of the screen.
  6a. Use the left mouse button to add 'wall' cells (holding shift will delete cells). 
  6b. Use the right mouse button to add 'water' cells (holding shift will create 'water' cells faster.)

Note on running the current build:
  CA Water uses the XNA framework, part of the Microsoft .NET 4 framework. If you have difficulty running the executable, 
    - Ensure you have an up to date version of Microsoft .NET ( http://www.microsoft.com/download/en/details.aspx?id=17718 )
    - Ensure you have an up to date version of the XNA Framework Redistributable (http://www.microsoft.com/download/en/details.aspx?id=20914)

Features In Development:

# Water Pressure
  - Using a process based upon what is described here: http://www.gamasutra.com/view/feature/131954/interview_the_making_of_dwarf_.php?page=9
# Queued Rule Operations 
  - Currently the system is limited to using cells of 4px X 4px or larger in order to maintain a reasonable framerate of 30fps or higher. Implementing a Queue for rule execution will likely allow displaying a screen of 1px X 1px cells in real time   
# Library
  - Porting the code to an extensible library will simplify implementing this code into future applications and open the possibility for developing educational tools.


Special thanks to Professor Gerald Farin for clarifying the properties of compressible and incompressible liquids! With his advice the simulation has greatly improved.